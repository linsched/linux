# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-trace-python Documentation for the list of available functions.

import os
import sys

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
	'/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

from perf_trace_context import *
from Core import *
from Util import *

class Event:
	ts = 0
	rtype = ''
	comm = ''
	time = 0
	def __init__(self, timestamp=0, rtype='', comm='', time=0):
		self.ts = timestamp
		self.rtype = rtype
		self.comm = comm
		self.time = time

linsched_events = {}

def squash(sorted_list):
	squashed_list = []
	prev = Event()
	for i in sorted_list:
		#Now we can squash
		if prev.rtype == i.rtype:
			prev.time += i.time
		else:
			squashed_list.append(i)
			prev = i
	return squashed_list

def generate_rlog(squashed_list, pid):
	fname = str(pid) + ".rlog"
	rlog = open(fname, 'w')
	for i in squashed_list:
		line = str(i.ts) + ", " + str(i.rtype) + ", " \
			+ str(i.comm) + ", " + str(i.time) + '\n'
		rlog.write(line)
	rlog.close()

def generate(sorted_list, pid):
	squashed_list = squash(sorted_list)
	generate_rlog(squashed_list, pid)

def trace_begin():
	pass

def trace_end():
	for i in linsched_events:
		linsched_events[i].sort(key=lambda e: e.ts)
		generate(linsched_events[i], i)

def add_event(pid, event):
	if not pid in linsched_events:
		linsched_events[pid] = []
	linsched_events[pid].append(event)

def sched__sched_stat_runtime(event_name, context, common_cpu,
		common_secs, common_nsecs, common_pid, common_comm,
		comm, pid, runtime, vruntime):
	cur_ts = nsecs(common_secs, common_nsecs)
	cur_event = Event(cur_ts, "R", comm, runtime)
	add_event(pid, cur_event)

def sched__sched_stat_iowait(event_name, context, common_cpu,
		common_secs, common_nsecs, common_pid, common_comm,
		comm, pid, delay):
	cur_ts = nsecs(common_secs, common_nsecs)
	cur_event = Event(cur_ts, "I", comm, delay)
	add_event(pid, cur_event)

def sched__sched_stat_sleep(event_name, context, common_cpu,
		common_secs, common_nsecs, common_pid, common_comm,
		comm, pid, delay):
	cur_ts = nsecs(common_secs, common_nsecs)
	cur_event = Event(cur_ts, "S", comm, delay)
	add_event(pid, cur_event)
